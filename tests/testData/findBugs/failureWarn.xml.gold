InspectionTypeInfo{myId='DLS_DEAD_LOCAL_STORE', myName='Dead store to local variable', myDescription='Code that is confusing, anomalous, or written in a way that leads itself to errors. Examples include dead local stores, switch fall through, unconfirmed casts, and redundant null check of value known to be null. More false positives accepted. In previous versions of FindBugs, this category was known as Style.', myCategory='Dodgy'}
InspectionInstance{myInspectionId='DLS_DEAD_LOCAL_STORE', myMessage='This instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction. Often, this indicates an error, because the value computed is never used. Note that Sun's javac compiler often generates dead stores for final local variables. Because FindBugs is a bytecode-based tool, there is no easy way to eliminate these false positives.', myFilePath='##BASE_DIR##/failure/org/jetbrains/testProject/BuggyClass.java', myLine=18, myPriority=2}
InspectionTypeInfo{myId='DLS_DEAD_LOCAL_STORE', myName='Dead store to local variable', myDescription='Code that is confusing, anomalous, or written in a way that leads itself to errors. Examples include dead local stores, switch fall through, unconfirmed casts, and redundant null check of value known to be null. More false positives accepted. In previous versions of FindBugs, this category was known as Style.', myCategory='Dodgy'}
InspectionInstance{myInspectionId='DLS_DEAD_LOCAL_STORE', myMessage='This instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction. Often, this indicates an error, because the value computed is never used. Note that Sun's javac compiler often generates dead stores for final local variables. Because FindBugs is a bytecode-based tool, there is no easy way to eliminate these false positives.', myFilePath='##BASE_DIR##/failure/org/jetbrains/testProject/BuggyClass.java', myLine=23, myPriority=2}
InspectionTypeInfo{myId='DLS_DEAD_LOCAL_STORE', myName='Dead store to local variable', myDescription='Code that is confusing, anomalous, or written in a way that leads itself to errors. Examples include dead local stores, switch fall through, unconfirmed casts, and redundant null check of value known to be null. More false positives accepted. In previous versions of FindBugs, this category was known as Style.', myCategory='Dodgy'}
InspectionInstance{myInspectionId='DLS_DEAD_LOCAL_STORE', myMessage='This instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction. Often, this indicates an error, because the value computed is never used. Note that Sun's javac compiler often generates dead stores for final local variables. Because FindBugs is a bytecode-based tool, there is no easy way to eliminate these false positives.', myFilePath='##BASE_DIR##/failure/org/jetbrains/testProject/BuggyClass.java', myLine=28, myPriority=2}
InspectionTypeInfo{myId='NM_BAD_EQUAL', myName='Class defines equal(Object); should it be equals(Object)?', myDescription='Probable bug - an apparent coding mistake resulting in code that was probably not what the developer intended. We strive for a low false positive rate.', myCategory='Correctness'}
InspectionInstance{myInspectionId='NM_BAD_EQUAL', myMessage='This class defines a method equal(Object). This method does not override the equals(Object) method in java.lang.Object, which is probably what was intended.', myFilePath='##BASE_DIR##/failure/org/jetbrains/testProject/BuggyClass.java', myLine=9, myPriority=1}
InspectionTypeInfo{myId='SA_LOCAL_SELF_ASSIGNMENT', myName='Self assignment of local variable', myDescription='Code that is confusing, anomalous, or written in a way that leads itself to errors. Examples include dead local stores, switch fall through, unconfirmed casts, and redundant null check of value known to be null. More false positives accepted. In previous versions of FindBugs, this category was known as Style.', myCategory='Dodgy'}
InspectionInstance{myInspectionId='SA_LOCAL_SELF_ASSIGNMENT', myMessage='This method contains a self assignment of a local variable; e.g.public void foo() { int x = 3; x = x; }Such assignments are useless, and may indicate a logic error or typo.', myFilePath='##BASE_DIR##/failure/org/jetbrains/testProject/BuggyClass.java', myLine=18, myPriority=2}
InspectionTypeInfo{myId='SA_LOCAL_SELF_ASSIGNMENT', myName='Self assignment of local variable', myDescription='Code that is confusing, anomalous, or written in a way that leads itself to errors. Examples include dead local stores, switch fall through, unconfirmed casts, and redundant null check of value known to be null. More false positives accepted. In previous versions of FindBugs, this category was known as Style.', myCategory='Dodgy'}
InspectionInstance{myInspectionId='SA_LOCAL_SELF_ASSIGNMENT', myMessage='This method contains a self assignment of a local variable; e.g.public void foo() { int x = 3; x = x; }Such assignments are useless, and may indicate a logic error or typo.', myFilePath='##BASE_DIR##/failure/org/jetbrains/testProject/BuggyClass.java', myLine=23, myPriority=2}
InspectionTypeInfo{myId='SA_LOCAL_SELF_ASSIGNMENT', myName='Self assignment of local variable', myDescription='Code that is confusing, anomalous, or written in a way that leads itself to errors. Examples include dead local stores, switch fall through, unconfirmed casts, and redundant null check of value known to be null. More false positives accepted. In previous versions of FindBugs, this category was known as Style.', myCategory='Dodgy'}
InspectionInstance{myInspectionId='SA_LOCAL_SELF_ASSIGNMENT', myMessage='This method contains a self assignment of a local variable; e.g.public void foo() { int x = 3; x = x; }Such assignments are useless, and may indicate a logic error or typo.', myFilePath='##BASE_DIR##/failure/org/jetbrains/testProject/BuggyClass.java', myLine=28, myPriority=2}
InspectionTypeInfo{myId='UUF_UNUSED_FIELD', myName='Unused field', myDescription='Code that is not necessarily incorrect but may be inefficient', myCategory='Performance'}
InspectionInstance{myInspectionId='UUF_UNUSED_FIELD', myMessage='This field is never used. Consider removing it from the class.', myFilePath='##BASE_DIR##/failure/org/jetbrains/testProject/BuggyClass.java', myLine=4, myPriority=2}
InspectionTypeInfo{myId='SIC_INNER_SHOULD_BE_STATIC', myName='Should be a static inner class', myDescription='Code that is not necessarily incorrect but may be inefficient', myCategory='Performance'}
InspectionInstance{myInspectionId='SIC_INNER_SHOULD_BE_STATIC', myMessage='This class is an inner class, but does not use its embedded reference to the object which created it. This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary. If possible, the class should be made static.', myFilePath='##BASE_DIR##/failure/org/jetbrains/testProject/BuggyClass.java', myLine=31, myPriority=2}
InspectionTypeInfo{myId='UUF_UNUSED_FIELD', myName='Unused field', myDescription='Code that is not necessarily incorrect but may be inefficient', myCategory='Performance'}
InspectionInstance{myInspectionId='UUF_UNUSED_FIELD', myMessage='This field is never used. Consider removing it from the class.', myFilePath='##BASE_DIR##/failure/org/jetbrains/testProject/BuggyClass.java', myLine=31, myPriority=2}
InspectionTypeInfo{myId='NM_BAD_EQUAL', myName='Class defines equal(Object); should it be equals(Object)?', myDescription='Probable bug - an apparent coding mistake resulting in code that was probably not what the developer intended. We strive for a low false positive rate.', myCategory='Correctness'}
InspectionInstance{myInspectionId='NM_BAD_EQUAL', myMessage='This class defines a method equal(Object). This method does not override the equals(Object) method in java.lang.Object, which is probably what was intended.', myFilePath='org/jetbrains/testProject/ExampleClass.java', myLine=31, myPriority=1}
